generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  full_name       String
  email           String          @unique
  password        String
  status          Boolean         @default(false)
  email_verified  Boolean         @default(false)
  avatar          String?
  reset_token     String?
  reset_token_exp DateTime?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @default(now()) @updatedAt
  user_roles      UserRole[]
  doctors         DoctorProfile[]
  profiles        ClientProfile[]
}

model UserRole {
  id        Int     @id @default(autoincrement())
  role_id   String
  user_id   String
  is_active Boolean @default(true)
  role      Role    @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Role {
  id         String     @id @default(uuid())
  code       String     @unique
  name       String
  is_active  Boolean?   @default(true)
  user_roles UserRole[]
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
}

// data reference table
model Location {
  id        Int     @id @default(autoincrement())
  title     String  @unique
  address   String?
  note      String?
  longitude String?
  latitude  String?

  work_times LocationWorkTime[]
  doctors    DoctorProfile[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model LocationWorkTime {
  id          Int       @id @default(autoincrement())
  location_id Int
  day         String
  open        DateTime?
  close       DateTime?

  location Location @relation(fields: [location_id], references: [id], onDelete: Cascade)
}

model BankAccount {
  id       Int     @id @default(autoincrement())
  title    String  @unique
  name     String
  number   String
  provider String
  note     String?
}

model Specialism {
  id      Int                @id @default(autoincrement())
  name    String
  doctors DoctorSpecialism[]
}

// end: data reference table

model DoctorProfile {
  id           String    @id @default(uuid())
  user_id      String?
  location_id  Int?
  category     String
  title        String?
  first_name   String
  last_name    String?
  email        String
  phone_number String?
  pob          String?
  dob          DateTime?
  address      String?
  sex          String?
  is_active    Boolean   @default(true)

  location    Location?          @relation(fields: [location_id], references: [id], onDelete: SetNull)
  user        User?              @relation(fields: [user_id], references: [id], onDelete: SetNull)
  specialisms DoctorSpecialism[]
  sessions    DoctorSession[]
  services    DoctorService[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model DoctorSpecialism {
  id            Int           @id @default(autoincrement())
  doctor_id     String
  specialism_id Int
  doctor        DoctorProfile @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  specialism    Specialism    @relation(fields: [specialism_id], references: [id], onDelete: Cascade)
}

model DoctorSession {
  id         String   @id @default(uuid())
  doctor_id  String?
  service_id String?
  date       DateTime
  time_start String
  time_end   String
  note       String?
  is_locked  Boolean  @default(false)

  doctor  DoctorProfile? @relation(fields: [doctor_id], references: [id], onDelete: SetNull)
  service Service?       @relation(fields: [service_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model ServiceCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  services    Service[]
}

model Service {
  id            String  @id @default(uuid())
  category_id   Int?
  title         String
  description   String?
  price         Float
  price_unit    String
  duration      Int?
  is_active     Boolean @default(true)
  is_additional Boolean @default(false)

  category ServiceCategory? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  doctors  DoctorService[]
  sessions DoctorSession[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model DoctorService {
  id         Int    @id @default(autoincrement())
  service_id String
  doctor_id  String

  doctor  DoctorProfile @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [service_id], references: [id], onDelete: Cascade)
}

// client
model ClientProfile {
  id           String   @id @default(uuid())
  user_id      String?
  relation     String
  category     String
  first_name   String
  last_name    String?
  email        String?
  phone_number String?
  pob          String
  dob          DateTime
  address      String?
  sex          String
  blood_type   String?
  ethnic       String?
  nationality  String?
  is_active    Boolean  @default(true)

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}
