generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  full_name       String
  email           String    @unique
  password        String
  status          Boolean   @default(false)
  email_verified  Boolean   @default(false)
  avatar          String?
  reset_token     String?
  reset_token_exp DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt

  user_roles              UserRole[]
  doctors                 DoctorProfile[]
  clients                 ClientProfile[]
  questionnaire_responses QuestionnaireResponse[]
  bookings                Booking[]
}

model UserRole {
  id        Int     @id @default(autoincrement())
  role_id   Int
  user_id   String
  is_active Boolean @default(true)

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Role {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  is_active Boolean? @default(true)

  user_roles UserRole[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// LOCATION -> set service location, doctors location
model Location {
  id      Int     @id @default(autoincrement())
  title   String  @unique
  address String?

  doctors  DoctorProfile[]
  services Service[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// BANK ACCOUNT
model BankAccount {
  id             Int    @id @default(autoincrement())
  title          String @unique
  in_name        String
  account_number String
  provider       String
}

// DOCTORS
model Specialism {
  id   Int    @id @default(autoincrement())
  name String

  doctors DoctorProfile[]
}

model DoctorProfile {
  id           String    @id @default(uuid())
  user_id      String?
  location_id  Int?
  category     String
  title        String?
  first_name   String
  last_name    String?
  email        String
  phone_number String?
  pob          String?
  dob          DateTime?
  address      String?
  sex          String?
  is_active    Boolean   @default(true)

  location                     Location?                   @relation(fields: [location_id], references: [id], onDelete: SetNull)
  user                         User?                       @relation(fields: [user_id], references: [id], onDelete: SetNull)
  specialisms                  Specialism[]
  sessions                     DoctorSession[]
  services                     Service[]
  service_recommendation_items ServiceRecommendationItem[]
  service_recommendations      ServiceRecommendation[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model DoctorSession {
  id                 String   @id @default(uuid())
  doctor_id          String?
  service_id         String?
  date               DateTime
  time_start         String
  time_end           String
  note               String?
  booking_service_id String?
  is_locked          Boolean  @default(false)

  doctor          DoctorProfile?  @relation(fields: [doctor_id], references: [id], onDelete: SetNull)
  service         Service?        @relation(fields: [service_id], references: [id])
  booking_service BookingService? @relation(fields: [booking_service_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// SERVICE 
model ServiceCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  services Service[]
}

model Service {
  id                   String   @id @default(uuid())
  category_id          Int?
  location_id          Int?
  title                String
  description          String?
  duration             Int? // in minute
  duration_description String?
  price                Float
  price_unit           String
  price_minimum        Float?
  doctor_fee           Decimal? @db.Decimal(5, 2) // in percentage
  is_active            Boolean? @default(true)

  category                     ServiceCategory?            @relation(fields: [category_id], references: [id], onDelete: SetNull)
  location                     Location?                   @relation(fields: [location_id], references: [id], onDelete: SetNull)
  doctors                      DoctorProfile[]
  sessions                     DoctorSession[]
  required_services            Service[]                   @relation("RequiredServices")
  prerequisite_For             Service[]                   @relation("RequiredServices")
  questionnaires               Questionnaire[]
  bookings                     BookingService[]
  service_recommendation_items ServiceRecommendationItem[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// CLIENT / PATIENT
model ClientProfile {
  id           String   @id @default(uuid())
  code         String?  @unique
  user_id      String?
  relation     String
  category     String
  first_name   String
  last_name    String?
  email        String?
  phone_number String?
  pob          String
  dob          DateTime
  address      String?
  sex          String
  blood_type   String?
  ethnic       String?
  nationality  String?
  is_active    Boolean  @default(true)

  user                    User?                   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  questionnaire_responses QuestionnaireResponse[]
  bookings                Booking[]
  service_recommendations ServiceRecommendation[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// QUESTIONNAIRE 
model Questionnaire {
  id          String  @id @default(uuid())
  title       String  @unique
  description String?

  questions Question[]
  responses QuestionnaireResponse[]
  services  Service[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model QuestionnaireResponse {
  id                 String  @id @default(uuid())
  note               String?
  user_id            String?
  client_id          String?
  questionnaire_id   String?
  booking_service_id String?
  is_locked          Boolean @default(false)

  user            User?            @relation(fields: [user_id], references: [id], onDelete: SetNull)
  client          ClientProfile?   @relation(fields: [client_id], references: [id], onDelete: SetNull)
  questionnaire   Questionnaire?   @relation(fields: [questionnaire_id], references: [id], onDelete: SetNull)
  booking_service BookingService?  @relation(fields: [booking_service_id], references: [id], onDelete: Cascade)
  answers         QuestionAnswer[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Question {
  id               Int     @id @default(autoincrement())
  questionnaire_id String
  code             String  @unique
  section          String?
  label            String
  name             String
  hint             String?
  help             String?
  typ              String
  min              Int?
  max              Int?
  file_typ         String?
  file_max_byte    Int?
  other            Boolean @default(false)
  required         Boolean @default(false)

  questionnaire Questionnaire    @relation(fields: [questionnaire_id], references: [id], onDelete: Cascade)
  options       QuestionOption[]
  answers       QuestionAnswer[]
}

model QuestionOption {
  id          Int    @id @default(autoincrement())
  question_id Int
  label       String
  value       String

  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model QuestionAnswer {
  id          Int       @id @default(autoincrement())
  response_id String
  question_id Int?
  text        String?
  number      Float?
  date        DateTime?

  response QuestionnaireResponse @relation(fields: [response_id], references: [id], onDelete: Cascade)
  question Question?             @relation(fields: [question_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// BOOKING SERVICE
model Booking {
  id         String  @id @default(uuid())
  profile_id String?
  user_id    String?
  status     String // draft, pending_payment, waiting, ongoing, completed
  total      Float

  profile  ClientProfile?   @relation(fields: [profile_id], references: [id], onDelete: SetNull)
  user     User?            @relation(fields: [user_id], references: [id], onDelete: SetNull)
  services BookingService[]
  payments Payments[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model BookingService {
  id          String  @id @default(uuid())
  booking_id  String?
  service_id  String?
  category_id Int?
  location_id Int?

  compliant String?
  quantity  Int

  service_data String? // stringify json; service data on booking
  is_locked    Boolean @default(false)

  questionnaire_responses QuestionnaireResponse[]
  doctor_sessions         DoctorSession[]

  booking Booking? @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [service_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// payments 
model Payments {
  id                 String    @id @default(uuid())
  amount_paid        Float
  payment_method     String
  payment_proof_path String?
  status             String
  transaction_id     String?
  payment_date       DateTime?
  expiry_date        DateTime?

  bookings Booking[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// SERVICE RECOMMENDATION
model ServiceRecommendation {
  id        String  @id @default(uuid())
  title     String?
  doctor_id String?
  client_id String

  service_reccomendation_items ServiceRecommendationItem[]
  doctor                       DoctorProfile?              @relation(fields: [doctor_id], references: [id], onDelete: SetNull)
  client                       ClientProfile               @relation(fields: [client_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model ServiceRecommendationItem {
  id                        Int     @id @default(autoincrement())
  quantity                  Int
  note                      String
  service_id                String
  doctor_id                 String?
  service_recommendation_id String

  service                Service               @relation(fields: [service_id], references: [id], onDelete: Cascade)
  doctor                 DoctorProfile?        @relation(fields: [doctor_id], references: [id], onDelete: SetNull)
  service_recommendation ServiceRecommendation @relation(fields: [service_recommendation_id], references: [id], onDelete: Cascade)
}
