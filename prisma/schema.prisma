generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  full_name       String
  email           String    @unique
  password        String
  status          Boolean   @default(false)
  email_verified  Boolean   @default(false)
  avatar          String?
  reset_token     String?
  reset_token_exp DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt

  user_roles              UserRole[]
  doctors                 DoctorProfile[]
  profiles                ClientProfile[]
  questionnaire_responses QuestionnaireResponse[]
  schedules               Schedule[]
}

model UserRole {
  id        Int     @id @default(autoincrement())
  role_id   String
  user_id   String
  is_active Boolean @default(true)
  role      Role    @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Role {
  id         String     @id @default(uuid())
  code       String     @unique
  name       String
  is_active  Boolean?   @default(true)
  user_roles UserRole[]
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
}

model Location {
  id        Int     @id @default(autoincrement())
  title     String  @unique
  address   String?
  note      String?
  longitude String?
  latitude  String?

  work_times LocationWorkTime[]
  doctors    DoctorProfile[]
  services   Service[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model LocationWorkTime {
  id          Int       @id @default(autoincrement())
  location_id Int
  day         String
  open        DateTime?
  close       DateTime?

  location Location @relation(fields: [location_id], references: [id], onDelete: Cascade)
}

model BankAccount {
  id       Int     @id @default(autoincrement())
  title    String  @unique
  name     String
  number   String
  provider String
  note     String?
}

model Specialism {
  id      Int                @id @default(autoincrement())
  name    String
  doctors DoctorSpecialism[]
}

model DoctorProfile {
  id           String    @id @default(uuid())
  user_id      String?
  location_id  Int?
  category     String
  title        String?
  first_name   String
  last_name    String?
  email        String
  phone_number String?
  pob          String?
  dob          DateTime?
  address      String?
  sex          String?
  is_active    Boolean   @default(true)

  location    Location?          @relation(fields: [location_id], references: [id], onDelete: SetNull)
  user        User?              @relation(fields: [user_id], references: [id], onDelete: SetNull)
  specialisms DoctorSpecialism[]
  sessions    DoctorSession[]
  services    DoctorService[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model DoctorSpecialism {
  id            Int           @id @default(autoincrement())
  doctor_id     String
  specialism_id Int
  doctor        DoctorProfile @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  specialism    Specialism    @relation(fields: [specialism_id], references: [id], onDelete: Cascade)
}

model DoctorSession {
  id                 String   @id @default(uuid())
  doctor_id          String?
  service_id         String?
  date               DateTime
  time_start         String
  time_end           String
  note               String?
  is_locked          Boolean  @default(false)
  booking_service_id String?

  doctor          DoctorProfile?  @relation(fields: [doctor_id], references: [id], onDelete: SetNull)
  service         Service?        @relation(fields: [service_id], references: [id], onDelete: Cascade)
  booking_service BookingService? @relation(fields: [booking_service_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model ServiceCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  services    Service[]
}

model Service {
  id            String  @id @default(uuid())
  category_id   Int?
  location_id   Int?
  title         String
  description   String?
  price         Float
  price_unit    String
  duration      Int?
  is_active     Boolean @default(true)
  is_additional Boolean @default(false)

  category         ServiceCategory?       @relation(fields: [category_id], references: [id], onDelete: SetNull)
  location         Location?              @relation(fields: [location_id], references: [id], onDelete: SetNull)
  doctors          DoctorService[]
  sessions         DoctorSession[]
  questionnaires   ServiceQuestionnaire[]
  booking_services BookingService[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model DoctorService {
  id         Int    @id @default(autoincrement())
  service_id String
  doctor_id  String

  doctor  DoctorProfile @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [service_id], references: [id], onDelete: Cascade)
}

model ClientProfile {
  id           String   @id @default(uuid())
  code         String?  @unique
  user_id      String?
  relation     String
  category     String
  first_name   String
  last_name    String?
  email        String?
  phone_number String?
  pob          String
  dob          DateTime
  address      String?
  sex          String
  blood_type   String?
  ethnic       String?
  nationality  String?
  is_active    Boolean  @default(true)

  user                    User?                   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  questionnaire_responses QuestionnaireResponse[]
  bookings                Booking[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Questionnaire {
  id          String  @id @default(uuid())
  title       String  @unique
  description String?

  questions Question[]
  responses QuestionnaireResponse[]
  services  ServiceQuestionnaire[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model ServiceQuestionnaire {
  id               Int    @id @default(autoincrement())
  questionnaire_id String
  service_id       String

  questionnaire Questionnaire @relation(fields: [questionnaire_id], references: [id], onDelete: Cascade)
  service       Service       @relation(fields: [service_id], references: [id], onDelete: Cascade)
}

model QuestionnaireResponse {
  id                 String  @id @default(uuid())
  note               String?
  user_id            String?
  client_id          String?
  questionnaire_id   String?
  booking_service_id String?
  is_locked          Boolean @default(false)

  user            User?            @relation(fields: [user_id], references: [id], onDelete: SetNull)
  client          ClientProfile?   @relation(fields: [client_id], references: [id], onDelete: SetNull)
  questionnaire   Questionnaire?   @relation(fields: [questionnaire_id], references: [id], onDelete: SetNull)
  booking_service BookingService?  @relation(fields: [booking_service_id], references: [id], onDelete: Cascade)
  answers         QuestionAnswer[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Question {
  id               Int     @id @default(autoincrement())
  questionnaire_id String
  code             String  @unique
  section          String?
  label            String
  name             String
  hint             String?
  help             String?
  typ              String
  min              Int?
  max              Int?
  file_typ         String?
  file_max_byte    Int?
  other            Boolean @default(false)
  required         Boolean @default(false)

  questionnaire Questionnaire    @relation(fields: [questionnaire_id], references: [id], onDelete: Cascade)
  options       QuestionOption[]
  answers       QuestionAnswer[]
}

model QuestionOption {
  id          Int    @id @default(autoincrement())
  question_id Int
  label       String
  value       String

  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model QuestionAnswer {
  id          Int       @id @default(autoincrement())
  response_id String
  question_id Int?
  text        String?
  number      Float?
  date        DateTime?

  response QuestionnaireResponse @relation(fields: [response_id], references: [id], onDelete: Cascade)
  question Question?             @relation(fields: [question_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Booking {
  id         String  @id @default(uuid())
  profile_id String?
  status     String // draft, pending_payment, waiting, ongoing, completed
  total      Float

  profile          ClientProfile?   @relation(fields: [profile_id], references: [id], onDelete: SetNull)
  booking_services BookingService[]
  payments    Payments[] @relation("BookingPayments")

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model BookingService {
  id          String  @id @default(uuid())
  booking_id  String?
  service_id  String?
  category_id Int?
  location_id Int?

  compliant     String?
  quantity      Int
  category_name String?
  location_name String?
  title         String
  description   String?
  price         Float
  price_unit    String
  duration      Int?
  is_active     Boolean @default(true)
  is_additional Boolean @default(false)
  is_locked     Boolean @default(false)

  questionnaire_responses QuestionnaireResponse[]
  attachments             Attachment[]
  schedules               Schedule[]
  doctor_sessions         DoctorSession[]

  booking Booking? @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [service_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Attachment {
  id          String  @id @default(uuid())
  file_path   String
  file_typ    String?
  file_byte   Int?
  title       String
  description String?

  booking_services BookingService[]
  schedules        Schedule[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Schedule {
  id         String   @id @default(uuid())
  start_date DateTime
  end_date   DateTime
  title      String
  note       String?

  users            User[]
  booking_services BookingService[]
  attachments      Attachment[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Payments {
  id                 String      @id @default(uuid())
  amount_paid        Float
  payment_method     String
  payment_proof_path String?
  status             String
  transaction_id     String?
  payment_date       DateTime?
  expiry_date        DateTime?
  bookings           Booking[]   @relation("BookingPayments")
  created_at         DateTime    @default(now())
  updated_at         DateTime    @default(now()) @updatedAt
}