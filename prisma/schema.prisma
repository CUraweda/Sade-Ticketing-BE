generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  full_name       String
  email           String    @unique
  password        String
  status          Boolean   @default(false)
  email_verified  Boolean   @default(false)
  avatar          String?
  reset_token     String?
  reset_token_exp DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt

  doctor                  DoctorProfile?
  user_roles              UserRole[]
  clients                 ClientProfile[]
  questionnaire_responses QuestionnaireResponse[]
  bookings                Booking[]
  payments                Payments[]
  invoices                Invoice[]
  notifications           NotificationUser[]
  created_notifications   Notification[]
  chatrooms               ChatRoomMember[]
  chats                   Chat[]
  chat_reads              ChatRead[]
  signatures              Signature[]
}

model UserRole {
  id        Int     @id @default(autoincrement())
  role_id   Int
  user_id   String
  is_active Boolean @default(true)

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Role {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  is_active Boolean? @default(true)

  user_roles    UserRole[]
  notifications Notification[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// SIGNATURE
model Signature {
  id      String @id @default(uuid())
  user_id String

  name               String
  role               String
  signature_img_path String?
  detail             String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// NOTIFICATION
model Notification {
  id        String  @id @default(uuid())
  sender_id String?

  title     String
  message   String
  type      String
  color     String?
  payload   String? @db.LongText
  is_system Boolean @default(false)

  roles  Role[]
  users  NotificationUser[]
  sender User?              @relation(fields: [sender_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model NotificationUser {
  notification_id String
  user_id         String
  is_read         Boolean @default(false)

  notification Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([notification_id, user_id])
}

// LOCATION -> set service location, doctors location
model Location {
  id      Int     @id @default(autoincrement())
  title   String  @unique
  address String?

  doctors  DoctorProfile[]
  services Service[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// BANK ACCOUNT
model BankAccount {
  id             Int        @id @default(autoincrement())
  title          String     @unique
  in_name        String
  account_number String
  provider       String
  payments       Payments[]
  invoices       Invoice[]
}

// DOCTORS
model Specialism {
  id   Int    @id @default(autoincrement())
  name String

  doctors DoctorProfile[]
}

model DoctorProfile {
  id          String  @id @default(uuid())
  user_id     String? @unique
  location_id Int?
  grade_id    Int?

  category      String
  title         String?
  first_name    String
  last_name     String?
  email         String    @unique
  phone_number  String?
  pob           String?
  dob           DateTime?
  address       String?
  sex           String?
  is_active     Boolean   @default(true)
  avatar        String?
  transport_fee Float?

  location                Location?               @relation(fields: [location_id], references: [id], onDelete: SetNull)
  user                    User?                   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  specialisms             Specialism[]
  grade                   DoctorGrade?            @relation(fields: [grade_id], references: [id], onDelete: SetNull)
  services                DoctorService[]
  service_recommendations ServiceRecommendation[]
  schedules               Schedule[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model DoctorGrade {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  hex_color String?

  doctors DoctorProfile[]
}

// SERVICE 
model ServiceCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  hex_color   String?

  services Service[]
}

model Service {
  id                   String   @id @default(uuid())
  category_id          Int?
  location_id          Int?
  title                String   @unique
  description          String?  @db.LongText
  duration             Int? // in minute
  duration_description String?
  price                Float
  price_unit           String?
  price_minimum        Float?
  doctor_fee           Decimal? @db.Decimal(5, 2) // in percentage
  is_active            Boolean? @default(true)
  billing_type         String   @default("one_time")
  need_recommendation  Boolean  @default(false)

  category                ServiceCategory?        @relation(fields: [category_id], references: [id], onDelete: SetNull)
  location                Location?               @relation(fields: [location_id], references: [id], onDelete: SetNull)
  doctors                 DoctorService[]
  required_services       Service[]               @relation("RequiredServices")
  prerequisite_For        Service[]               @relation("RequiredServices")
  questionnaires          Questionnaire[]         @relation("ServiceQuestionnaires")
  reports                 Questionnaire[]         @relation("ServiceReports")
  agrement_documents      Document[]
  service_recommendations ServiceRecommendation[]
  schedules               Schedule[]
  bookings                Booking[]
  fees                    ServiceFee[]
  service_prices          ServicePrice[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model ServiceFee {
  id         Int    @id @default(autoincrement())
  fee_id     Int
  service_id String

  type String // sit_in, entry_tuition

  fee     Fee     @relation(fields: [fee_id], references: [id], onDelete: Cascade)
  service Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@unique([fee_id, service_id])
}

model ServicePrice {
  id           String  @id @default(uuid())
  service_id   String?
  privilege_id String?
  price        Float

  service   Service?   @relation(fields: [service_id], references: [id], onDelete: SetNull)
  privilege Privilege? @relation(fields: [privilege_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model DoctorService {
  id         Int    @id @default(autoincrement())
  doctor_id  String
  service_id String

  salary Float

  doctor  DoctorProfile @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@unique([doctor_id, service_id])
}

// CLIENT / PATIENT
model ClientProfile {
  id           String   @id @default(uuid())
  code         String?  @unique
  user_id      String?
  relation     String
  category     String
  first_name   String
  last_name    String?
  email        String?
  phone_number String?
  pob          String
  dob          DateTime
  address      String?
  sex          String
  blood_type   String?
  ethnic       String?
  nationality  String?
  is_active    Boolean  @default(true)
  avatar       String?

  user                    User?                   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  questionnaire_responses QuestionnaireResponse[]
  bookings                Booking[]
  service_recommendations ServiceRecommendation[]
  schedules               ScheduleAttendee[]
  daycare_journals        DaycareJournal[]
  client_privileges       ClientPrivilege[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// CLIENT PRIVILAGE
model ClientPrivilege {
  id           String @id @default(uuid())
  client_id    String
  privilege_id String

  client    ClientProfile @relation(fields: [client_id], references: [id], onDelete: Cascade)
  privilege Privilege     @relation(fields: [privilege_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// CLIENT PRIVILAGE
model Privilege {
  id          String  @id @default(uuid())
  title       String
  image_path  String?
  description String? @db.LongText

  servicePrices ServicePrice[]
  privileges    ClientPrivilege[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// QUESTIONNAIRE 
model Questionnaire {
  id          String  @id @default(uuid())
  title       String  @unique
  description String? @db.LongText
  signers     String?

  questions        Question[]
  responses        QuestionnaireResponse[]
  services         Service[]               @relation("ServiceQuestionnaires")
  services_reports Service[]               @relation("ServiceReports")

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model QuestionnaireResponse {
  id                String  @id @default(uuid())
  user_id           String?
  client_id         String?
  questionnaire_id  String?
  booking_id        String?
  booking_report_id String?

  note      String?
  is_locked Boolean @default(false)

  user           User?                            @relation(fields: [user_id], references: [id], onDelete: SetNull)
  client         ClientProfile?                   @relation(fields: [client_id], references: [id], onDelete: SetNull)
  questionnaire  Questionnaire?                   @relation(fields: [questionnaire_id], references: [id], onDelete: SetNull)
  booking        Booking?                         @relation(name: "BookingQuestionnaires", fields: [booking_id], references: [id], onDelete: Cascade)
  booking_report Booking?                         @relation(name: "BookingReports", fields: [booking_report_id], references: [id], onDelete: Cascade)
  answers        QuestionAnswer[]
  signatures     QuestionnaireResponseSignature[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model QuestionnaireResponseSignature {
  id          Int    @id @default(autoincrement())
  response_id String

  name               String
  role               String
  signature_img_path String?
  detail             String?
  signed_place       String?
  signed_at          DateTime @default(now())

  response QuestionnaireResponse @relation(fields: [response_id], references: [id], onDelete: Cascade)
}

model Question {
  id               Int     @id @default(autoincrement())
  questionnaire_id String
  code             String  @unique
  section          String?
  label            String
  name             String
  hint             String?
  help             String?
  typ              String
  min              Int?
  max              Int?
  file_typ         String?
  file_max_byte    Int?
  other            Boolean @default(false)
  required         Boolean @default(false)

  questionnaire Questionnaire    @relation(fields: [questionnaire_id], references: [id], onDelete: Cascade)
  options       QuestionOption[]
  answers       QuestionAnswer[]
}

model QuestionOption {
  id          Int    @id @default(autoincrement())
  question_id Int
  label       String
  value       String

  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model QuestionAnswer {
  id          Int       @id @default(autoincrement())
  response_id String
  question_id Int?
  text        String?
  number      Float?
  date        DateTime?
  long_text   String?   @db.LongText

  response QuestionnaireResponse @relation(fields: [response_id], references: [id], onDelete: Cascade)
  question Question?             @relation(fields: [question_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// BOOKING SERVICE
model Booking {
  id                String  @id @default(uuid())
  client_id         String?
  user_id           String?
  service_id        String?
  recommendation_id String?

  compliant        String?
  quantity         Int
  price            Float
  service_data     String? @db.LongText
  status           String // draft, pending_payment, waiting, ongoing, completed
  title            String?
  is_locked        Boolean @default(false)
  weekly_frequency String?

  client                  ClientProfile?           @relation(fields: [client_id], references: [id], onDelete: SetNull)
  user                    User?                    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  service                 Service?                 @relation(fields: [service_id], references: [id], onDelete: SetNull)
  recommendation          ServiceRecommendation?   @relation("BookingRecommendation", fields: [recommendation_id], references: [id], onDelete: SetNull)
  questionnaire_responses QuestionnaireResponse[]  @relation("BookingQuestionnaires")
  reports                 QuestionnaireResponse[]  @relation("BookingReports")
  invoices                Invoice[]
  service_recommendations ServiceRecommendation[]  @relation("BookingRecommendations")
  daycare_journals        DaycareJournal[]
  agreed_documents        BookingAgreedDocuments[]
  schedules               ScheduleAttendee[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model BookingAgreedDocuments {
  id          Int     @id @default(autoincrement())
  booking_id  String
  document_id String
  is_agreed   Boolean @default(false)

  booking  Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@unique([booking_id, document_id])
}

// INVOICE AND PAYMENT
model Fee {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String?
  price       Float
  tags        String?

  invoices         InvoiceFee[]
  daycare_logtimes DaycareLogTime[]
  services         ServiceFee[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model InvoiceFee {
  id         Int    @id @default(autoincrement())
  invoice_id String
  fee_id     Int?

  name     String
  quantity Int    @default(1)
  price    Float

  fee     Fee?    @relation(fields: [fee_id], references: [id], onDelete: SetNull)
  invoice Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
}

model InvoiceItem {
  id         Int     @id @default(autoincrement())
  invoice_id String
  service_id String?

  dates         String?
  name          String
  quantity      Int
  quantity_unit String?
  price         Float
  note          String?

  invoice   Invoice?           @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  attendees ScheduleAttendee[]
}

model Invoice {
  id              String  @id @default(uuid())
  bank_account_id Int?
  user_id         String?
  payment_id      String?

  title       String
  total       Float
  status      String // issued, paid, overdue
  expiry_date DateTime?
  paid_date   DateTime?
  note        String?

  bank_account BankAccount?  @relation(fields: [bank_account_id], references: [id], onDelete: SetNull)
  user         User?         @relation(fields: [user_id], references: [id], onDelete: SetNull)
  payment      Payments?     @relation(fields: [payment_id], references: [id], onDelete: SetNull)
  bookings     Booking[]
  fees         InvoiceFee[]
  items        InvoiceItem[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Payments {
  id                 String    @id @default(uuid())
  amount_paid        Float
  payment_method     String
  payment_proof_path String?
  status             String
  transaction_id     String?
  bank_account_id    Int?
  user_id            String?
  payment_date       DateTime?
  expiry_date        DateTime?
  note               String?
  type               String    @default("in") // in, out

  user         User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)
  bank_account BankAccount? @relation(fields: [bank_account_id], references: [id], onDelete: SetNull)
  invoices     Invoice[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// SERVICE RECOMMENDATION
model ServiceRecommendation {
  id         String  @id @default(uuid())
  doctor_id  String?
  booking_id String?
  client_id  String
  service_id String

  note             String?
  quantity         Int
  weekly_frequency String?
  is_read          Boolean @default(false)

  doctor   DoctorProfile? @relation(fields: [doctor_id], references: [id], onDelete: SetNull)
  booking  Booking?       @relation("BookingRecommendations", fields: [booking_id], references: [id], onDelete: SetNull)
  client   ClientProfile  @relation(fields: [client_id], references: [id], onDelete: Cascade)
  service  Service        @relation(fields: [service_id], references: [id], onDelete: Cascade)
  bookings Booking[]      @relation("BookingRecommendation")

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// SCHEDULE
model Schedule {
  id         String  @id @default(uuid())
  parent_id  String?
  service_id String?

  start_date    DateTime
  end_date      DateTime?
  title         String
  description   String?
  is_locked     Boolean   @default(false)
  max_attendees Int?      @default(1)
  repeat        String?
  repeat_end    DateTime?

  parent                Schedule?           @relation("NestedSchedule", fields: [parent_id], references: [id])
  service               Service?            @relation(fields: [service_id], references: [id], onDelete: SetNull)
  children              Schedule[]          @relation("NestedSchedule")
  new_schedule_requests RescheduleRequest[]
  doctors               DoctorProfile[]
  attendees             ScheduleAttendee[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([start_date, end_date, parent_id])
}

model ScheduleAttendee {
  id          String  @id @default(uuid())
  schedule_id String?
  client_id   String?
  booking_id  String?

  status      String? // present, sick, excused, null (absent)
  note        String?
  group_label String?
  overtime    Int? // in second
  is_active   Boolean? @default(false)

  schedule            Schedule?           @relation(fields: [schedule_id], references: [id], onDelete: SetNull)
  client              ClientProfile?      @relation(fields: [client_id], references: [id], onDelete: SetNull)
  booking             Booking?            @relation(fields: [booking_id], references: [id], onDelete: SetNull)
  invoices            InvoiceItem[]
  reschedule_requests RescheduleRequest[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([schedule_id, booking_id])
}

model RescheduleRequest {
  id              String  @id @default(uuid())
  attendee_id     String
  new_schedule_id String?

  reason      String
  response    String?
  is_approved Boolean?

  attendee     ScheduleAttendee @relation(fields: [attendee_id], references: [id], onDelete: Cascade)
  new_schedule Schedule?        @relation(fields: [new_schedule_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// DAYCARE
model DaycareJournal {
  id         String @id @default(uuid())
  client_id  String
  booking_id String

  date            DateTime
  bed_time        DateTime?
  wakeup_time     DateTime?
  body_temperatur Float?
  breakfast_menu  String?
  is_poop         Boolean?
  parent_note     String?   @db.LongText

  is_present            Boolean  @default(false)
  morning_snack         String?
  noon_snack            String?
  afternoon_snack       String?
  is_sleep_soundly      Boolean?
  poop_count            Int?
  fav_activity          String?
  daily_progress_report String?  @db.LongText
  facilitator_note      String?  @db.LongText
  today_feeling         String?

  client  ClientProfile    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  booking Booking          @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  logtime DaycareLogTime[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model DaycareLogTime {
  id         Int    @id @default(autoincrement())
  fee_id     Int?
  journal_id String

  time        DateTime
  title       String
  description String?

  fee     Fee?           @relation(fields: [fee_id], references: [id], onDelete: SetNull)
  journal DaycareJournal @relation(fields: [journal_id], references: [id], onDelete: Cascade)
}

// DOCUMENT
model Document {
  id         String  @id @default(uuid())
  creator_id String?

  title   String @unique
  content String @db.LongText

  services          Service[]
  booking_agreement BookingAgreedDocuments[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// BALANCE
enum BalanceType {
  IN
  OUT
}

model Balance {
  id     String      @id @default(uuid())
  title  String
  amount Float
  holder String // the value will be system OR DoctorProfile.id
  type   BalanceType

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// CUSTOMER SERVICE
model ChatRoom {
  id       String  @id @default(uuid())
  name     String?
  is_group Boolean

  members ChatRoomMember[]
  chats   Chat[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model ChatRoomMember {
  id          Int    @id @default(autoincrement())
  user_id     String
  chatroom_id String

  is_admin  Boolean  @default(false)
  joined_at DateTime @default(now())

  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chatroom ChatRoom @relation(fields: [chatroom_id], references: [id], onDelete: Cascade)

  @@unique([user_id, chatroom_id])
}

model Chat {
  id          String  @id @default(uuid())
  user_id     String?
  chatroom_id String
  parent_id   String? // reply

  message String @db.LongText

  user     User?      @relation(fields: [user_id], references: [id], onDelete: SetNull)
  chatroom ChatRoom   @relation(fields: [chatroom_id], references: [id], onDelete: Cascade)
  parent   Chat?      @relation("ChatReplies", fields: [parent_id], references: [id])
  children Chat[]     @relation("ChatReplies")
  readers  ChatRead[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model ChatRead {
  id      Int    @id @default(autoincrement())
  chat_id String
  user_id String

  read_at DateTime @default(now())

  chat Chat @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([chat_id, user_id])
}
